#!/usr/bin/env ansible-playbook
# Dumps a database, optionally copies it to the machine running ansible, and restores it to the database on local
# Examples:
# 1. Dump staging database and fetch it to the machine running this script:
# ./db-utils --limit node0.staging --tags dump,fetch -e app=cool_app_1
# 2. Restore the fetched dump file to the local database
# ./db-utils --limit node0.local --tags restore -e app=cool_app_1
---
- hosts: database
  vars_files: [app-vars.yml]
  vars:
    workdir: '{{ ansible_env.HOME }}/{{ project.name }}/data/{{ app_name }}'

  tasks:
    - set_fact:
        app_envs: "{{ vars['app_vars'][app_name]['envs'] }}"
      tags: always

    - debug: var=app_envs
      tags: debug

    - name: Dump database
      tags: dump
      # NOTE: the -Fc dumps the database in a compressed binary format (not gzip)
      shell: 'pg_dump -Fc -h {{ app_envs.DATABASE_HOST }} -U {{ app_envs.DATABASE_USERNAME }} -d {{ app_envs.DATABASE_NAME }} -w -f /tmp/{{ app_name }}.sql'

    - name: Copy database dump to target machine
      tags: fetch
      fetch:
        src: '/tmp/{{ app_name }}.sql'
        dest: '{{ workdir }}/{{ app_name }}.sql'
        flat: yes

    - name: Restore database dump
      tags: restore
      shell: 'pg_restore --no-owner --clean --no-privileges -h {{ app_envs.DATABASE_HOST }} -U {{ app_envs.DATABASE_USERNAME }} -d {{ app_envs.DATABASE_NAME }} -w {{ workdir }}/{{ app_name }}.sql'
